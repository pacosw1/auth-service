// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserPrivilegeControlClient is the client API for UserPrivilegeControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPrivilegeControlClient interface {
	GetPrivileges(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PrivilegeList, error)
	SetPrivileges(ctx context.Context, in *PrivilegeList, opts ...grpc.CallOption) (*PrivilegeList, error)
}

type userPrivilegeControlClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPrivilegeControlClient(cc grpc.ClientConnInterface) UserPrivilegeControlClient {
	return &userPrivilegeControlClient{cc}
}

func (c *userPrivilegeControlClient) GetPrivileges(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*PrivilegeList, error) {
	out := new(PrivilegeList)
	err := c.cc.Invoke(ctx, "/proto.UserPrivilegeControl/getPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPrivilegeControlClient) SetPrivileges(ctx context.Context, in *PrivilegeList, opts ...grpc.CallOption) (*PrivilegeList, error) {
	out := new(PrivilegeList)
	err := c.cc.Invoke(ctx, "/proto.UserPrivilegeControl/setPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPrivilegeControlServer is the server API for UserPrivilegeControl service.
// All implementations must embed UnimplementedUserPrivilegeControlServer
// for forward compatibility
type UserPrivilegeControlServer interface {
	GetPrivileges(context.Context, *UserID) (*PrivilegeList, error)
	SetPrivileges(context.Context, *PrivilegeList) (*PrivilegeList, error)
	mustEmbedUnimplementedUserPrivilegeControlServer()
}

// UnimplementedUserPrivilegeControlServer must be embedded to have forward compatible implementations.
type UnimplementedUserPrivilegeControlServer struct {
}

func (UnimplementedUserPrivilegeControlServer) GetPrivileges(context.Context, *UserID) (*PrivilegeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivileges not implemented")
}
func (UnimplementedUserPrivilegeControlServer) SetPrivileges(context.Context, *PrivilegeList) (*PrivilegeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPrivileges not implemented")
}
func (UnimplementedUserPrivilegeControlServer) mustEmbedUnimplementedUserPrivilegeControlServer() {}

// UnsafeUserPrivilegeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPrivilegeControlServer will
// result in compilation errors.
type UnsafeUserPrivilegeControlServer interface {
	mustEmbedUnimplementedUserPrivilegeControlServer()
}

func RegisterUserPrivilegeControlServer(s grpc.ServiceRegistrar, srv UserPrivilegeControlServer) {
	s.RegisterService(&_UserPrivilegeControl_serviceDesc, srv)
}

func _UserPrivilegeControl_GetPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPrivilegeControlServer).GetPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserPrivilegeControl/getPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPrivilegeControlServer).GetPrivileges(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPrivilegeControl_SetPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivilegeList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPrivilegeControlServer).SetPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserPrivilegeControl/setPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPrivilegeControlServer).SetPrivileges(ctx, req.(*PrivilegeList))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPrivilegeControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserPrivilegeControl",
	HandlerType: (*UserPrivilegeControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getPrivileges",
			Handler:    _UserPrivilegeControl_GetPrivileges_Handler,
		},
		{
			MethodName: "setPrivileges",
			Handler:    _UserPrivilegeControl_SetPrivileges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contract.proto",
}

// SessionsClient is the client API for Sessions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionsClient interface {
	GetSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error)
	CreateSession(ctx context.Context, in *SessionInput, opts ...grpc.CallOption) (*SessionID, error)
}

type sessionsClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionsClient(cc grpc.ClientConnInterface) SessionsClient {
	return &sessionsClient{cc}
}

func (c *sessionsClient) GetSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/proto.Sessions/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) CreateSession(ctx context.Context, in *SessionInput, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := c.cc.Invoke(ctx, "/proto.Sessions/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionsServer is the server API for Sessions service.
// All implementations must embed UnimplementedSessionsServer
// for forward compatibility
type SessionsServer interface {
	GetSession(context.Context, *SessionID) (*Session, error)
	CreateSession(context.Context, *SessionInput) (*SessionID, error)
	mustEmbedUnimplementedSessionsServer()
}

// UnimplementedSessionsServer must be embedded to have forward compatible implementations.
type UnimplementedSessionsServer struct {
}

func (UnimplementedSessionsServer) GetSession(context.Context, *SessionID) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionsServer) CreateSession(context.Context, *SessionInput) (*SessionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionsServer) mustEmbedUnimplementedSessionsServer() {}

// UnsafeSessionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionsServer will
// result in compilation errors.
type UnsafeSessionsServer interface {
	mustEmbedUnimplementedSessionsServer()
}

func RegisterSessionsServer(s grpc.ServiceRegistrar, srv SessionsServer) {
	s.RegisterService(&_Sessions_serviceDesc, srv)
}

func _Sessions_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sessions/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).GetSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sessions/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).CreateSession(ctx, req.(*SessionInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sessions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Sessions",
	HandlerType: (*SessionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Sessions_GetSession_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Sessions_CreateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contract.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	CreateUser(ctx context.Context, in *SignUpData, opts ...grpc.CallOption) (*NewUserAuth, error)
	UpdateEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
	Authenticate(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*AuthResponse, error)
	UpdatePassword(ctx context.Context, in *PasswordReset, opts ...grpc.CallOption) (*Response, error)
	VerifyEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error)
	GetUserData(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserData, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CreateUser(ctx context.Context, in *SignUpData, opts ...grpc.CallOption) (*NewUserAuth, error) {
	out := new(NewUserAuth)
	err := c.cc.Invoke(ctx, "/proto.Auth/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Auth/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Authenticate(ctx context.Context, in *LoginData, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/proto.Auth/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdatePassword(ctx context.Context, in *PasswordReset, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Auth/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) VerifyEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.Auth/VerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserData(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/proto.Auth/GetUserData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	CreateUser(context.Context, *SignUpData) (*NewUserAuth, error)
	UpdateEmail(context.Context, *Email) (*Response, error)
	Authenticate(context.Context, *LoginData) (*AuthResponse, error)
	UpdatePassword(context.Context, *PasswordReset) (*Response, error)
	VerifyEmail(context.Context, *Email) (*Response, error)
	GetUserData(context.Context, *UserID) (*UserData, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) CreateUser(context.Context, *SignUpData) (*NewUserAuth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServer) UpdateEmail(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedAuthServer) Authenticate(context.Context, *LoginData) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedAuthServer) UpdatePassword(context.Context, *PasswordReset) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAuthServer) VerifyEmail(context.Context, *Email) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedAuthServer) GetUserData(context.Context, *UserID) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUser(ctx, req.(*SignUpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authenticate(ctx, req.(*LoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordReset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdatePassword(ctx, req.(*PasswordReset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth/VerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Auth/GetUserData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserData(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Auth_CreateUser_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _Auth_UpdateEmail_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _Auth_Authenticate_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Auth_UpdatePassword_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Auth_VerifyEmail_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _Auth_GetUserData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/contract.proto",
}
